//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CharacterInputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterInputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterInputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterInputControl"",
    ""maps"": [
        {
            ""name"": ""CharacterMap"",
            ""id"": ""d037260c-f524-453b-ac1b-d4cd287865b5"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""Value"",
                    ""id"": ""650bf6b3-d330-460e-ba05-74562b99466c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e49cae4b-7007-4855-80a3-4b5fbb390c6e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f679841f-fd43-44ff-88ab-912a91363ae9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3f805b9-14a3-421b-8e06-a82d23a65859"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4a55ab1f-651e-4d6c-836a-19c0051c6fbb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6265609a-cb78-4ee4-ba8d-fedac97680a9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""9eabcddf-229a-4308-8f70-249d6a715e97"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""31ef3b73-1cdd-4c97-952d-b2c1ab92228c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8e3bf8f7-5888-4470-92b9-4addc9d81da2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ace1e5bc-cc65-442d-bf87-a03f1f2e6251"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9a1ebbd6-65cc-4de2-be28-d07172c7d337"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterMap
        m_CharacterMap = asset.FindActionMap("CharacterMap", throwIfNotFound: true);
        m_CharacterMap_Motion = m_CharacterMap.FindAction("Motion", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterMap
    private readonly InputActionMap m_CharacterMap;
    private List<ICharacterMapActions> m_CharacterMapActionsCallbackInterfaces = new List<ICharacterMapActions>();
    private readonly InputAction m_CharacterMap_Motion;
    public struct CharacterMapActions
    {
        private @CharacterInputControl m_Wrapper;
        public CharacterMapActions(@CharacterInputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Motion => m_Wrapper.m_CharacterMap_Motion;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMapActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterMapActionsCallbackInterfaces.Add(instance);
            @Motion.started += instance.OnMotion;
            @Motion.performed += instance.OnMotion;
            @Motion.canceled += instance.OnMotion;
        }

        private void UnregisterCallbacks(ICharacterMapActions instance)
        {
            @Motion.started -= instance.OnMotion;
            @Motion.performed -= instance.OnMotion;
            @Motion.canceled -= instance.OnMotion;
        }

        public void RemoveCallbacks(ICharacterMapActions instance)
        {
            if (m_Wrapper.m_CharacterMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterMapActions @CharacterMap => new CharacterMapActions(this);
    public interface ICharacterMapActions
    {
        void OnMotion(InputAction.CallbackContext context);
    }
}
