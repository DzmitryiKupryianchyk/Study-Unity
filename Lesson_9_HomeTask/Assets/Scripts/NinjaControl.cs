//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/NinjaControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NinjaControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NinjaControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NinjaControl"",
    ""maps"": [
        {
            ""name"": ""NinjaMap"",
            ""id"": ""ff5fa66f-72f5-44d5-bbac-887e0fd54a7c"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""Value"",
                    ""id"": ""b07e6a9f-212f-4a1c-bfbd-e5943727aa40"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""87174faf-16e9-424d-8b73-bbc52b582c33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fight"",
                    ""type"": ""Button"",
                    ""id"": ""282f832b-072f-42c2-8b80-63a20a74c567"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""664c52ef-86ac-44e8-9d31-c15ba97d919e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""9347d0b4-1f29-46e0-93b4-d62b9e4f260b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b931bb3b-72e5-492f-940c-f976aa7c3750"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""149cb799-3679-426e-bf81-9ecf97a68d33"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""70c2b749-ddc8-4fe8-a989-21f47b2d3fe7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""edb51652-8cae-4b6f-a415-fdc8dd28e569"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""d1a1b6c6-e12a-4e2f-bfb7-f2562a70841b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""20dcdc09-d655-4481-870b-950e04ea6f6f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""af76e3bc-8635-47a1-b613-6cc36994ce3f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""54dc9c6c-4912-4621-89f8-ccc7b390c7e7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fe6552b8-6b5f-46f6-96cc-49c91551602b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""74b25c15-a6eb-43b2-a51f-8f0ff731c0f2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0df6c710-99d4-48b1-822c-333ba6f6cabd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5a47d29-6f72-4c9b-a28e-2d004c53ac42"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NinjaMap
        m_NinjaMap = asset.FindActionMap("NinjaMap", throwIfNotFound: true);
        m_NinjaMap_Motion = m_NinjaMap.FindAction("Motion", throwIfNotFound: true);
        m_NinjaMap_Jump = m_NinjaMap.FindAction("Jump", throwIfNotFound: true);
        m_NinjaMap_Fight = m_NinjaMap.FindAction("Fight", throwIfNotFound: true);
        m_NinjaMap_Continue = m_NinjaMap.FindAction("Continue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NinjaMap
    private readonly InputActionMap m_NinjaMap;
    private List<INinjaMapActions> m_NinjaMapActionsCallbackInterfaces = new List<INinjaMapActions>();
    private readonly InputAction m_NinjaMap_Motion;
    private readonly InputAction m_NinjaMap_Jump;
    private readonly InputAction m_NinjaMap_Fight;
    private readonly InputAction m_NinjaMap_Continue;
    public struct NinjaMapActions
    {
        private @NinjaControl m_Wrapper;
        public NinjaMapActions(@NinjaControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Motion => m_Wrapper.m_NinjaMap_Motion;
        public InputAction @Jump => m_Wrapper.m_NinjaMap_Jump;
        public InputAction @Fight => m_Wrapper.m_NinjaMap_Fight;
        public InputAction @Continue => m_Wrapper.m_NinjaMap_Continue;
        public InputActionMap Get() { return m_Wrapper.m_NinjaMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NinjaMapActions set) { return set.Get(); }
        public void AddCallbacks(INinjaMapActions instance)
        {
            if (instance == null || m_Wrapper.m_NinjaMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NinjaMapActionsCallbackInterfaces.Add(instance);
            @Motion.started += instance.OnMotion;
            @Motion.performed += instance.OnMotion;
            @Motion.canceled += instance.OnMotion;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fight.started += instance.OnFight;
            @Fight.performed += instance.OnFight;
            @Fight.canceled += instance.OnFight;
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(INinjaMapActions instance)
        {
            @Motion.started -= instance.OnMotion;
            @Motion.performed -= instance.OnMotion;
            @Motion.canceled -= instance.OnMotion;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fight.started -= instance.OnFight;
            @Fight.performed -= instance.OnFight;
            @Fight.canceled -= instance.OnFight;
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(INinjaMapActions instance)
        {
            if (m_Wrapper.m_NinjaMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INinjaMapActions instance)
        {
            foreach (var item in m_Wrapper.m_NinjaMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NinjaMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NinjaMapActions @NinjaMap => new NinjaMapActions(this);
    public interface INinjaMapActions
    {
        void OnMotion(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFight(InputAction.CallbackContext context);
        void OnContinue(InputAction.CallbackContext context);
    }
}
