//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""MyMap"",
            ""id"": ""f6e3d237-bacd-4a76-b508-464d55167202"",
            ""actions"": [
                {
                    ""name"": ""Creation"",
                    ""type"": ""Button"",
                    ""id"": ""948a7f75-acbb-4e30-8b69-77e8e298da4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""174e8de0-e35f-4b8e-af3b-28e5402c0a3d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Creation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MyMap
        m_MyMap = asset.FindActionMap("MyMap", throwIfNotFound: true);
        m_MyMap_Creation = m_MyMap.FindAction("Creation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MyMap
    private readonly InputActionMap m_MyMap;
    private List<IMyMapActions> m_MyMapActionsCallbackInterfaces = new List<IMyMapActions>();
    private readonly InputAction m_MyMap_Creation;
    public struct MyMapActions
    {
        private @InputManager m_Wrapper;
        public MyMapActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Creation => m_Wrapper.m_MyMap_Creation;
        public InputActionMap Get() { return m_Wrapper.m_MyMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MyMapActions set) { return set.Get(); }
        public void AddCallbacks(IMyMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MyMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MyMapActionsCallbackInterfaces.Add(instance);
            @Creation.started += instance.OnCreation;
            @Creation.performed += instance.OnCreation;
            @Creation.canceled += instance.OnCreation;
        }

        private void UnregisterCallbacks(IMyMapActions instance)
        {
            @Creation.started -= instance.OnCreation;
            @Creation.performed -= instance.OnCreation;
            @Creation.canceled -= instance.OnCreation;
        }

        public void RemoveCallbacks(IMyMapActions instance)
        {
            if (m_Wrapper.m_MyMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMyMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MyMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MyMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MyMapActions @MyMap => new MyMapActions(this);
    public interface IMyMapActions
    {
        void OnCreation(InputAction.CallbackContext context);
    }
}
